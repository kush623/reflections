What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

How to write a commit message
You're about to make your first commit to your reflections repository. When 
you do this, you'll need to write a commit message describing your changes. 
If you followed the instructions in the "Setting Up Your Workspace" video for 
your platform near the end of Lesson 1, the editor you chose will appear as soon 
as you run git commit and allow you to write a commit message. If you get an 
error message, you should try revisiting the instructions in Lesson 1 and make 
sure your text editor is set up properly.

You can also specify a commit message via the command line by running git commit -m 
"Commit message" instead of just git commit. It's still a good idea to get an editor 
set up, since this will make it easier to write long commit messages that fully 
describe the change.

Commit message style
While commit message style varies from person to person, this style guide 
describes some common best practices when writing commit messages.


How can you use the staging area to make sure you have one commit per logical change?

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent 
it in the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?